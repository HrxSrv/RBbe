#!/usr/bin/env python3
"""
Setup script for Opik environment configuration.

This script helps configure the required environment variables for Opik tracking
in the RecruitBot application.

Usage:
    python setup_opik_env.py
"""

import os
from pathlib import Path

def setup_opik_environment():
    """
    Interactive setup for Opik environment variables.
    """
    print("🔧 OPIK ENVIRONMENT SETUP")
    print("=" * 40)
    print()
    print("This script will help you configure Opik tracking for RecruitBot.")
    print("You can get your Opik credentials from: https://www.comet.com/opik/")
    print()
    
    # Check if .env file exists
    env_files = [".env.dev", ".env", "newenv.txt"]
    env_file = None
    
    for file in env_files:
        if Path(file).exists():
            env_file = file
            break
    
    if not env_file:
        env_file = ".env.dev"
        print(f"📄 Creating new environment file: {env_file}")
    else:
        print(f"📄 Found existing environment file: {env_file}")
    
    # Collect Opik configuration
    print("\n🔑 Opik Configuration:")
    
    # API Key
    current_api_key = os.getenv("OPIK_API_KEY", "")
    api_key = input(f"Enter your Opik API Key [{current_api_key[:10]}...]: ").strip()
    if not api_key and current_api_key:
        api_key = current_api_key
    
    # Workspace
    current_workspace = os.getenv("OPIK_WORKSPACE", "")
    workspace = input(f"Enter your Opik Workspace [{current_workspace}]: ").strip()
    if not workspace and current_workspace:
        workspace = current_workspace
    
    # Project Name
    current_project = os.getenv("OPIK_PROJECT_NAME", "resume-analysis")
    project = input(f"Enter your Opik Project Name [{current_project}]: ").strip()
    if not project:
        project = current_project
    
    # Gemini API Key (for the actual AI calls)
    current_gemini_key = os.getenv("GEMINI_API_KEY", "")
    gemini_key = input(f"Enter your Gemini API Key [{current_gemini_key[:10] if current_gemini_key else 'not set'}...]: ").strip()
    if not gemini_key and current_gemini_key:
        gemini_key = current_gemini_key
    
    # Read existing env file
    existing_vars = {}
    if Path(env_file).exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key.strip()] = value.strip()
    
    # Update with new Opik variables
    if api_key:
        existing_vars['OPIK_API_KEY'] = api_key
    if workspace:
        existing_vars['OPIK_WORKSPACE'] = workspace
    if project:
        existing_vars['OPIK_PROJECT_NAME'] = project
    if gemini_key:
        existing_vars['GEMINI_API_KEY'] = gemini_key
    
    # Write updated env file
    print(f"\n💾 Writing configuration to {env_file}...")
    
    with open(env_file, 'w') as f:
        # Write header
        f.write("# RecruitBot Environment Configuration\n")
        f.write("# Generated by setup_opik_env.py\n\n")
        
        # Write Opik configuration
        f.write("# Opik Configuration for LLM Tracking\n")
        if api_key:
            f.write(f"OPIK_API_KEY={api_key}\n")
        if workspace:
            f.write(f"OPIK_WORKSPACE={workspace}\n")
        if project:
            f.write(f"OPIK_PROJECT_NAME={project}\n")
        f.write("\n")
        
        # Write Gemini configuration
        f.write("# Gemini AI Configuration\n")
        if gemini_key:
            f.write(f"GEMINI_API_KEY={gemini_key}\n")
        f.write("\n")
        
        # Write other existing variables
        opik_vars = {'OPIK_API_KEY', 'OPIK_WORKSPACE', 'OPIK_PROJECT_NAME', 'GEMINI_API_KEY'}
        other_vars = {k: v for k, v in existing_vars.items() if k not in opik_vars}
        
        if other_vars:
            f.write("# Other Configuration\n")
            for key, value in sorted(other_vars.items()):
                f.write(f"{key}={value}\n")
    
    print("✅ Configuration saved successfully!")
    print()
    print("📋 Summary:")
    print(f"   📄 File: {env_file}")
    print(f"   🔑 Opik API Key: {'✅ Set' if api_key else '❌ Not set'}")
    print(f"   📊 Workspace: {workspace if workspace else '❌ Not set'}")
    print(f"   📁 Project: {project if project else '❌ Not set'}")
    print(f"   🤖 Gemini API Key: {'✅ Set' if gemini_key else '❌ Not set'}")
    
    print()
    print("🚀 Next Steps:")
    print("1. Make sure your .env file is loaded by your application")
    print("2. Run the test script: python test_gemini_opik_integration.py")
    print("3. Check your Opik dashboard for tracking data")
    print("4. Visit: https://www.comet.com/opik/")
    
    return True

def validate_configuration():
    """
    Validate that Opik configuration is working.
    """
    print("\n🔍 VALIDATING CONFIGURATION")
    print("-" * 30)
    
    try:
        # Try to import and configure Opik
        from app.config.opik_config import OpikConfig
        
        info = OpikConfig.get_project_info()
        print(f"📊 Opik Status: {'✅ Available' if info['available'] else '❌ Not available'}")
        print(f"📊 Workspace: {info['workspace']}")
        print(f"📁 Project: {info['project']}")
        
        if info['available']:
            print("✅ Opik configuration is valid and ready!")
            return True
        else:
            print("❌ Opik configuration needs attention.")
            return False
            
    except ImportError as e:
        print(f"❌ Failed to import Opik configuration: {e}")
        print("💡 Make sure you have installed all dependencies:")
        print("   pip install opik")
        return False
    except Exception as e:
        print(f"❌ Configuration validation failed: {e}")
        return False

def main():
    """
    Main setup function.
    """
    print("🏁 Welcome to RecruitBot Opik Setup!")
    print()
    
    # Setup environment
    setup_success = setup_opik_environment()
    
    if setup_success:
        # Validate configuration
        validation_success = validate_configuration()
        
        if validation_success:
            print("\n🎉 Setup completed successfully!")
            print("You can now use Opik tracking in RecruitBot.")
        else:
            print("\n⚠️  Setup completed but validation failed.")
            print("Please check your configuration and try again.")
    else:
        print("\n❌ Setup failed. Please try again.")

if __name__ == "__main__":
    main() 